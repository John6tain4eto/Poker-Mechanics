<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Poker</name>
    </assembly>
    <members>
        <member name="T:Poker.AddChips">
            <summary>
            Adding Chips
            </summary>
        </member>
        <member name="F:Poker.AddChips.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Poker.AddChips.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Poker.AddChips.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Poker.Character.Character.AllIn">
            <summary>
            All characters can call an AllIn to play all the money they got
            </summary>
            <returns></returns>
        </member>
        <member name="M:Poker.Character.Character.Fold(System.Boolean@,System.Boolean@,System.Windows.Forms.Label)">
            <summary>
            Fold tell us who is giving up
            </summary>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
        </member>
        <member name="M:Poker.Character.Character.ChangeStatusToChecking(System.Boolean@,System.Windows.Forms.Label)">
            <summary>
            Changes the label status to checking.
            </summary>
            <param name="isBotsTurn">if set to <c>true</c> [is bots turn].</param>
            <param name="statusLabel">The status label.</param>
        </member>
        <member name="M:Poker.Character.Character.Call(System.Int32@,System.Boolean@,System.Windows.Forms.Label)">
            <summary>
            You call the required amount of chips to continue playing the game
            </summary>
            <param name="botChips">The bot chips.</param>
            <param name="isBotsTurn">if set to <c>true</c> [is bots turn].</param>
            <param name="statusLabel">The status label.</param>
        </member>
        <member name="M:Poker.Character.Character.RaiseBet(System.Int32@,System.Boolean@,System.Windows.Forms.Label)">
            <summary>
            Raises the bet.
            </summary>
            <param name="botChips">The bot chips.</param>
            <param name="isBotsTurn">if set to <c>true</c> [is bots turn].</param>
            <param name="statusLabel">The status label.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.Straight(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
            Tell us the specified straight combination.
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.Flush(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
            Tell us the specified flush combination.
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.FullHouse(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
            Tell us the specified full house combination
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.FourOfAKind(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
            Tell us if we have four of a kind cards
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.StraightFlush(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
            Tell us if we have straight flush combination
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.MakeDecision(Poker.Interfaces.ICharacter,System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Int32,System.Int32,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double,System.Double)">
            <summary>
            Decision manager decide who has biggest winning combination
            </summary>
            <param name="character">The character.</param>
            <param name="cardCollection">The card collection.</param>
            <param name="firstCard">The first card.</param>
            <param name="secondCard">The second card.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
            <param name="behaviourPower">The bot current.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.HighCard(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            Tell us the highest card
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.PairTable(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            Tell us if we have a pair of some combination
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.PairHand(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            Tell us if we have a pair hand
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.TwoPairs(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            Tell us if we have combination of two pairs.
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.ThreeOfAKind(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
            Tell us if we have combination of three pairs.
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.CalculateMaximumBidAbilityOfTheBot(System.Int32,System.Int32)">
            <summary>
            Calculate the maximum amount of money that the bot can play with on this particular turn
            </summary>
            <param name="botChips">The bot chips.</param>
            <param name="behaviourFactor">The behaviour factor.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:Poker.Character.DecisionMaker.ChooseBotsMoveFirstWay(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double,System.Int32,System.Int32)">
            <summary>
            Chooses the bot's move if it has a "High Card" or "Pair" from table combination
            </summary>
            <param name="character">The character.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isBotsTurn">if set to <c>true</c> [is bots turn].</param>
            <param name="botFolds">if set to <c>true</c> [bot folds].</param>
            <param name="statusLabel">The status label.</param>
            <param name="botPower">The bot power.</param>
            <param name="carefulBehaviourFactor">The careful behaviour factor.</param>
            <param name="riskyBehaviourFactor">The risky behaviour factor.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.ChooseBotsMoveSecondWay(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Int32,System.Int32)">
             <summary>
            Chooses the bot's move if it has a "Pair" in the hand or "Two pairs" combinations - not sure about the combinations???
             </summary>
             <param name="character">The character.</param>
             <param name="botChips">The bot chips.</param>
             <param name="isBotsTurn">if set to <c>true</c> [is bots turn].</param>
             <param name="botFolds">if set to <c>true</c> [bot folds].</param>
             <param name="labelStatus">The label status.</param>
             <param name="raiseBehaviourFactor">The raise behaviour factor.</param>
             <param name="behaviourFactorBasedOnBotPower">The behaviour factor based on bot power.</param>
             <param name="callBehaviourFactor">The call behaviour factor.</param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.FixCall(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Windows.Forms.Label)">
            <summary>
            
            </summary>
            <param name="character"></param>
            <param name="botChips"></param>
            <param name="isBotsTurn"></param>
            <param name="labelStatus"></param>
        </member>
        <member name="M:Poker.Character.DecisionMaker.ChooseBotsMoveThirdWay(Poker.Interfaces.ICharacter,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Int32,System.Int32)">
             <summary>
            Chooses the bot's move if it has a "ThreeOfAKind", "Straight", "FullHouse", "Flush", "FourOfAKind" or "StraightFlush" combination - not sure about the combinations??? 
             </summary>
             <param name="character">The character.</param>
             <param name="botChips">The bot chips.</param>
             <param name="isBotsTurn">if set to <c>true</c> [is bots turn].</param>
             <param name="botFolds">if set to <c>true</c> [bot folds].</param>
             <param name="botStatus">The bot status.</param>
             <param name="botIndex">Index of the bot.</param>
             <param name="behaviourFactor">The behaviour factor.</param>
             <param name="r">The r.</param>
        </member>
        <member name="M:Poker.Character.Bot.#ctor">
            <summary>
            Initializes a new instance of DecisionMaker class.
            </summary>
        </member>
        <member name="M:Poker.Character.Bot.Decide(Poker.Interfaces.ICharacter,System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Int32,System.Int32,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double,System.Double)">
            <summary>
            Decides the winning combination.
            </summary>
            <param name="character">The character.</param>
            <param name="cardCollection">The card collection.</param>
            <param name="firstCard">The first card.</param>
            <param name="secondCard">The second card.</param>
            <param name="botChips">The bot chips.</param>
            <param name="isOnTurn">if set to <c>true</c> [is on turn].</param>
            <param name="isFinalTurn">if set to <c>true</c> [is final turn].</param>
            <param name="hasFolded">The has folded.</param>
            <param name="botIndex">Index of the bot.</param>
            <param name="botPower">The bot power.</param>
            <param name="behaviourPower">The behaviour power.</param>
        </member>
        <member name="M:Poker.Form1.CheckRaise(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="currentTurn"></param>
            <param name="raiseTurn"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Form1.FixCall(System.Windows.Forms.Label,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            </summary>
            <param name="status"></param>
            <param name="cCall"></param>
            <param name="cRaise"></param>
            <param name="options"></param>
        </member>
        <member name="M:Poker.Form1.AllIn">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Poker.Form1.Finish(System.Int32)">
            <summary>
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Form1.FixWinners">
            <summary>
            </summary>
        </member>
        <member name="M:Poker.Form1.AI(System.Int32,System.Int32,System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double,System.Double)">
            <summary>
                x
            </summary>
            <param name="firstCall">The first call.</param>
            <param name="secondCall">The second call.</param>
            <param name="sChips">The s chips.</param>
            <param name="sTurn">if set to <c>true</c> [s turn].</param>
            <param name="sFTurn">if set to <c>true</c> [s f turn].</param>
            <param name="sStatus">The s status.</param>
            <param name="name">The name.</param>
            <param name="botPower">The bot cardsPower.</param>
            <param name="botCurrent">The bot curentCardsValue.</param>
        </member>
        <member name="M:Poker.Form1.HighCard(System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            </summary>
            <param name="sChips">The s chips.</param>
            <param name="sTurn">if set to <c>true</c> [s turn].</param>
            <param name="sFTurn">if set to <c>true</c> [s f turn].</param>
            <param name="sStatus">The s status.</param>
            <param name="botPower">The bot cardsPower.</param>
        </member>
        <member name="M:Poker.Form1.PairTable(System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            </summary>
            <param name="sChips">The s chips.</param>
            <param name="sTurn">if set to <c>true</c> [s turn].</param>
            <param name="sFTurn">if set to <c>true</c> [s f turn].</param>
            <param name="sStatus">The s status.</param>
            <param name="botPower">The bot cardsPower.</param>
        </member>
        <member name="M:Poker.Form1.PairHand(System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
                Pairs the hand.
            </summary>
            <param name="sChips">The s chips.</param>
            <param name="sTurn">if set to <c>true</c> [s turn].</param>
            <param name="sFTurn">if set to <c>true</c> [s f turn].</param>
            <param name="sStatus">The s status.</param>
            <param name="botPower">The bot cardsPower.</param>
        </member>
        <member name="M:Poker.Form1.TwoPairs(System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Double)">
            <summary>
            </summary>
            <param name="sChips">The s chips.</param>
            <param name="sTurn">if set to <c>true</c> [s turn].</param>
            <param name="sFTurn">if set to <c>true</c> [s f turn].</param>
            <param name="sStatus">The s status.</param>
            <param name="botPower">The bot cardsPower.</param>
        </member>
        <member name="M:Poker.Form1.ThreeOfAKind(System.Int32@,System.Boolean@,System.Boolean@,System.Windows.Forms.Label,System.Int32,System.Double)">
            <summary>
                Threes the kind of the of a.
            </summary>
            <param name="sChips">The s chips.</param>
            <param name="sTurn">if set to <c>true</c> [s turn].</param>
            <param name="sFTurn">if set to <c>true</c> [s f turn].</param>
            <param name="sStatus">The s status.</param>
            <param name="name">The name.</param>
            <param name="botPower">The bot cardsPower.</param>
        </member>
        <member name="F:Poker.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Poker.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Poker.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Poker.Interfaces.IDecisionMaker">
            <summary>
            The decision maker is artificial inteligence of the bot
            </summary>
        </member>
        <member name="M:Poker.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForStraightFlushOfClubs(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            This method determins if straight flush of clubs combination is available 
            </summary>
            <param name="charactersCardsCollection">
            Player's cards
            </param>
            <param name="tableCardsCollection">
            All cards visible on the table
            </param>
            <param name="character">
            current player
            </param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForStraightFlushOfDiamonds(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            This method determins if straight flush of diamonds combination is available 
            </summary>
            <param name="charactersCardsCollection">
            Player's cards
            </param>
            <param name="tableCardsCollection">
            All cards visible on the table
            </param>
            <param name="character">
            current player
            </param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForStraightFlushOfHearts(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            This method determins if straight flush of hearts combination is available 
            </summary>
            <param name="charactersCardsCollection">
            Player's cards
            </param>
            <param name="tableCardsCollection">
            All cards visible on the table
            </param>
            <param name="character">
            current player
            </param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForStraightFlushOfSpades(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            This method determins if straight flush of spades combination is available 
            </summary>
            <param name="charactersCardsCollection">
            Player's cards
            </param>
            <param name="tableCardsCollection">
            All cards visible on the table
            </param>
            <param name="character">
            current player
            </param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForFourOfAKind(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            This method cheks for forur of a kind combination
            </summary>
            <param name="charactersCardsCollection">
            Cards in player's hand
            </param>
            <param name="tableCardsCollection">
            Cards on table
            </param>
            <param name="character">
            player whose cards are checked
            </param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForThreeOfAKind(System.Collections.Generic.IEnumerable{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            Checks if the character has "Three-of-a-kind" card combination.
            </summary>
            <param name="charactersCardsCollection"></param>
            <param name="tableCardsCollection"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.RegisterCombination(Poker.Interfaces.ICharacter,System.Double,System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Enumerations.CombinationType,System.Double)">
            <summary>
            Registers the combination which is found to the character.
            </summary>
            <param name="character"></param>
            <param name="power"></param>
            <param name="combinationCardsCollection"></param>
            <param name="nonCombinationCardsCollection"></param>
            <param name="combinationType"></param>
            <param name="behaviourPower"></param>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForHighCard(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            Checks for a "High card" combination
            </summary>
            <param name="charactersCardsCollection"></param>
            <param name="tableCardsCollection"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForOnePair(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter,System.Boolean)">
            <summary>
            Checks if the two character's cards make a "Pair" or if one of the character's cards makes a "Pair" with one card from the table.
            </summary>
            <param name="charactersCardsCollection"></param>
            <param name="tableCardsCollection"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.CheckForTwoPairs(System.Collections.Generic.IList{Poker.Interfacees.ICard},System.Collections.Generic.IList{Poker.Interfacees.ICard},Poker.Interfaces.ICharacter)">
            <summary>
            Checks if the character has two pairs.
            </summary>
            <param name="charactersCardsCollection"></param>
            <param name="tableCardsCollection"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.DetermineTwoPairsPower(Poker.Interfaces.ICharacter,System.Collections.Generic.IList{Poker.Interfacees.ICard})">
            <summary>
            Determines the power of the hand in case of two pairs.
            </summary>
            <param name="character"></param>
            <param name="sameRankCardsCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.DetermineTheWinner(System.Collections.Generic.IList{Poker.Interfaces.ICharacter},System.Int32)">
            <summary>
            After all cards are down, this method chooses the winner
            </summary>
            <param name="gameCharacters">All particialnts in the game.</param>
            <param name="pot">The pot chips.</param>
        </member>
        <member name="M:Poker.Table.Dealer.ChooseTheWinnerByTheKickers(System.Collections.Generic.IList{Poker.Interfaces.ICharacter})">
            <summary>
            Chooses the winner, comparing the 'kickers' ranks.
            </summary>
            <param name="topCombinationCharactersCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Poker.Table.Dealer.DeclareWinners(System.Collections.Generic.IList{Poker.Interfaces.ICharacter})">
            <summary>
            Gets the names of the winners and prints them to the user.
            </summary>
            <param name="topCombinationCharactersCollection"></param>
        </member>
        <member name="M:Poker.Table.Dealer.PayPrizeToTheWinner(System.Int32,Poker.Interfaces.ICharacter)">
            <summary>
            Increases the winner's chips with the pot.
            </summary>
            <param name="pot"></param>
            <param name="winner"></param>
        </member>
        <member name="M:Poker.Table.Dealer.PayPrizeToTheWinners(System.Int32,System.Collections.Generic.IList{Poker.Interfaces.ICharacter})">
            <summary>
            Divides the pot equally between the winners. 
            </summary>
            <param name="pot"></param>
            <param name="topCombinationCharactersCollection"></param>
        </member>
        <member name="M:Poker.Table.Dealer.DetermineIfEqual(System.Collections.Generic.IList{Poker.Interfaces.ICharacter},System.Boolean)">
            <summary>
            Checks if the participants with the same top combination have alse the same 5 cards as ranks.
            </summary> 
            <param name="topCombinationCharactersCollection"></param>
            <param name="equalScore"></param>
            <returns></returns>
        </member>
        <member name="T:Poker.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Poker.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Poker.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Poker.Properties.Resources.clover_playing_card_gambling_clubs_suit_deck_1_128">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Poker.Properties.Resources.poker_table___Copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
